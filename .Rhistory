labs(subtitle = "Posicion Corta en Put")
g7 <- g7 + scale_x_continuous(limits=c(40, 100)) +
scale_y_continuous(limits=c(-30, 0)) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())
g7
g8 <- ggplot(payoff.shortput) + geom_line(aes(x = periodo, y = profit),
colour="red", size=1.5) +
xlab("Tiempo de Expiracion") +
ylab("Profit")
g8 <- g8 + theme_bw() + ggtitle("Profit de una Option Put") +
labs(subtitle = "Posicion Corta en Put")
g8 <- g8 + geom_hline(yintercept=0, linetype="dashed",color = "blue", size=1.5)
g8 <- g8 + scale_x_continuous(breaks = round(seq(min(payoff.shortput$periodo),
max(payoff.shortput$periodo), by = 10), 1),
limits=c(40, 100)) +
scale_y_continuous(breaks = round(seq(min(payoff.shortput$profit),
max(payoff.shortput$profit), by = 10), 1),
limits = c(limits=c(-30, 7)))
g8 <- g8 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
g8
bullspread.call <- function(S,K1,K2,precio1,precio2){
if(K1>=S) stop("K1 debe ser menor a S.")
if(S>=K2) stop("K2 debe ser mayor a S.")
#larga
callP1 = precio1
#corto
callP2 = precio2
stock=unique(round(seq(0,K1,length.out=6)))
stock=c(stock,round(seq(K1,K2,length.out=4)))
stock=c(stock,round(seq(K2,K2+K1,length.out=6)))
stock=unique(stock)
payoff=rep(0,length(stock))
profit=rep(0,length(stock))
for(i in 1:length(stock)){
if(stock[i]<=K1) payoff[i]=0
if(stock[i]>=K2) payoff[i]=K2-K1
if(stock[i]<K2 & stock[i]>K1) payoff[i]=stock[i]-K1
profit[i]=payoff[i]+(callP2-callP1)
}
data <- data.frame(stock,payoff,profit)
return(data)
}
# Posición larga en call
long.callpayoff <- function(s,k,v,r,t){
data.frame("payoff" = pmax(0,s-k), "stock" = s) %>%
mutate("profit" = payoff - v*exp(-r*t))
}
# Posición corta en call
short.callpayoff <- function(s,k,v,r,t){
data.frame("payoff" = pmin(k-s,0),"stock" = s) %>%
mutate("profit" = payoff + v*exp(-r*t))
}
bull.spread <- bullspread.call(32,30,35,3,1)
# Extraemos la St
s <- bull.spread$stock
# Call larga
long.call <- long.callpayoff(s,30,3,0,0)
# Call corta
short.call <- short.callpayoff(s,35,1,0,0)
g1 <- ggplot(bull.spread[4:10,]) +
geom_line(aes(long.call$stock[4:10], long.call$profit[4:10], color = "blue"),
linetype="dashed", size=1)
g1 <- g1 + geom_line(aes(short.call$stock[4:10], short.call$profit[4:10], color = "red"),
linetype="dashed", size=1)
g1 <- g1 + geom_line(aes(bull.spread$stock[4:10], bull.spread$profit[4:10], color = "green"), size=1)
g1 <- g1 + ggtitle("Estrategia Bull Spreads") + xlab("stock") + ylab("Profit") +
theme_bw()
g1 <- g1 + geom_hline(yintercept=0, linetype="dashed",color = "orange", size=1)
g1 <- g1 + scale_color_manual(name = " ",labels = c("Call larga", "Bull Spread", "Call corta"),
values = c("blue"="blue","green"="green","red" = "red"))
g1 <- g1 + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),legend.position="bottom")
g1
library("FinancialMath")
bull.call <- bull.call(31,30,35,0.0000001,5,3,1,plot=TRUE)
knitr::kable(head(bull.call$Payoff,4),caption = "Bull Spread Call")
# Ver las demás estrategias en la librería
knitr::kable(tail(bull.call$Payoff,4),caption = "Bull Spread Call")
# Ver las demás estrategias en la librería
# Parámetros
S0 <- 42
K <- 40
r <- 0.1
T <- 1/2
sigma <- 0.2
bs.opm <- function(S,K,T,riskfree,sigma,type){
d1<-(log(S/K)+(riskfree+0.5 * sigma^2) * T)/(sigma * sqrt(T))
d2<-d1-sigma * sqrt(T)
if(type=="Call"){
opt.val<-S * pnorm(d1)-K * exp(-riskfree * T) * pnorm(d2)
}
if(type=="Put"){
opt.val<-K * exp(-riskfree * T) * pnorm(-d2)-S * pnorm(-d1)
}
opt.val
}
# Para la call
C <- bs.opm(S = S0, K = K, T = T, riskfree = r, sigma = sigma, type = "Call" )
C
# Para la put
C <- bs.opm(S = S0, K = K, T = T, riskfree = r, sigma = sigma, type = "Put" )
C
library("fOptions")
# Con libreria call
GBSOption(TypeFlag = "c", S = S0, X = K, Time = T, r = r, b = r, sigma = sigma)@price
# Con libreria put
GBSOption(TypeFlag = "p", S = S0, X = K, Time = T, r = r, b = r, sigma = sigma)@price
opciones <- getOptionChain("ORCL", Exp="2019-09-20")
# Nos quedamos con las columnas del 1 al 2 y del 4 al 6.
calls <- opciones$calls[,c(1:2,4:6)]
# Nos quedamos con las columnas del 1 al 2 y del 4 al 6.
puts  <- opciones$puts[,c(1:2,4:6)]
# Al 31 de mayo la valuación, 31 de mayo del 2015 fue domingo, por ende, usamos el viernes 29
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
# Al 31 de mayo la valuación, 31 de mayo del 2015 fue domingo, por ende, usamos el viernes 29
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
# Al 31 de mayo la valuación, 31 de mayo del 2015 fue domingo, por ende, usamos el viernes 29
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
# Al 31 de mayo la valuación, 31 de mayo del 2015 fue domingo, por ende, usamos el viernes 29
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
# Al 31 de mayo la valuación, 31 de mayo del 2015 fue domingo, por ende, usamos el viernes 29
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
getSymbols("ORCL", from = "2016-06-31", to = "2019-06-01", periodicity = "daily")
getSymbols("ORCL", from = "2016-06-30", to = "2019-06-01", periodicity = "daily")
orcl <- as.data.frame(ORCL) %>%  # a data.frame
mutate(ret = log(ORCL.Adjusted/lag(ORCL.Adjusted))) %>%  # retorno
select(ORCL.Adjusted,ret) %>% # Seleccionamos el retorno y precio de ajuste
na.omit() # por el NA que se produce del retorno
# extraemos el precio a la fecha que nos piden
precio <- tail(orcl$ORCL.Adjusted,1)
getSymbols("DGS3MO",src ="FRED", to = "2019-06-01", periodicity = "daily")
getSymbols("DGS3MO",src ="FRED", to = "2019-06-01", periodicity = "daily")
rf <- as.numeric(subset(DGS3MO["2019-05-31"]))*0.01
expiracion.date <- as.Date("2019-09-20")
valuacion.date <- as.Date("2019-05-31")
TTM <- as.numeric((expiracion.date-valuacion.date)/365)
TTM
expiracion.date
(expiracion.date-valuacion.date)
vol.hist <- sd(orcl$ret)*sqrt(252)
vol.hist
orcl
orcl <- as.data.frame(ORCL) %>%  # a data.frame
mutate(ret = dplyr::log(ORCL.Adjusted/lag(ORCL.Adjusted))) %>%  # retorno
select(ORCL.Adjusted,ret) %>% # Seleccionamos el retorno y precio de ajuste
na.omit() # por el NA que se produce del retorno
orcl <- as.data.frame(ORCL) %>%  # a data.frame
mutate(ret = log(ORCL.Adjusted/dplyr::lag(ORCL.Adjusted))) %>%  # retorno
select(ORCL.Adjusted,ret) %>% # Seleccionamos el retorno y precio de ajuste
na.omit() # por el NA que se produce del retorno
# extraemos el precio a la fecha que nos piden
precio <- tail(orcl$ORCL.Adjusted,1)
rf <- as.numeric(subset(DGS3MO["2019-05-31"]))*0.01
expiracion.date <- as.Date("2019-09-20")
valuacion.date <- as.Date("2019-05-31")
TTM <- as.numeric((expiracion.date-valuacion.date)/365)
vol.hist <- sd(orcl$ret)*sqrt(252)
vol.hist
bs.call <- calls %>%
dplyr::filter(Strike == 45 | Strike == 50) %>%
select(Strike,Last,Bid,Ask)
bs.put <- puts %>%
dplyr::filter(Strike == 45 | Strike == 50) %>%
select(Strike,Last,Bid,Ask)
# call
GBSOption(TypeFlag = "c", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "c", S = precio, X = 50, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "c", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
library("fOptions")
# call
GBSOption(TypeFlag = "c", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
# call
GBSOption(TypeFlag = "c", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
calls
bs.call <- calls %>%
dplyr::filter(Strike == 45 | Strike == 50) %>%
select(Strike,Last,Bid,Ask)
bs.call
precio
View(ORCL)
bs.call <- calls %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
bs.call
bs.put <- puts %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
bs.put
bs.call <- calls %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf, sigma = vol.hist)@price
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf, sigma = vol.hist)@price
precio
TTM
rf
View(DGS3MO)
rf <- as.numeric(subset(DGS3MO["2019-05-30"]))*0.01
expiracion.date <- as.Date("2019-09-20")
valuacion.date <- as.Date("2019-05-31")
TTM <- as.numeric((expiracion.date-valuacion.date)/365)
vol.hist <- sd(orcl$ret)*sqrt(252)
bs.call <- calls %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
bs.put <- puts %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "c", S = precio, X = 51, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
# put
GBSOption(TypeFlag = "p", S = precio, X = 45, Time = TTM, r = rf, b = rf, sigma = vol.hist)@price
GBSOption(TypeFlag = "p", S = precio, X = 50, Time = TTM, r = rf, b = rf, sigma = vol.hist)@price
# put
GBSOption(TypeFlag = "p", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "p", S = precio, X = 50, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
bs.call
# put
GBSOption(TypeFlag = "p", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "p", S = precio, X = 50, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "c", S = precio, X = 51, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
bs.call
bs.call <- calls %>%
dplyr::filter(Strike == 46 | Strike == 51) %>%
select(Strike,Last,Bid,Ask)
bs.call
# call
GBSOption(TypeFlag = "c", S = precio, X = 46, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
bs.call
bs.put
# put
GBSOption(TypeFlag = "p", S = precio, X = 45, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "p", S = precio, X = 50, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
bs.put
# put
GBSOption(TypeFlag = "p", S = precio, X = 46, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
GBSOption(TypeFlag = "p", S = precio, X = 51, Time = TTM, r = rf, b = rf,
sigma = vol.hist)@price
bs.put
?e
exp(-0.3*sqrt(0.5))
1/exp(-0.3*sqrt(0.5))
exp(0.3*sqrt(0.5))
1/exp(0.3*sqrt(0.5))
exp(0.3*0.5)
exp(0.3*0.5) - 0.8088579
1.236311-0.8088579
0.3529763/0.4274531
0.3529763/0.4274531
50*1.236311
50*0.8088579
50*0.8088579**0.8088579
50*1.236311
50*1.236311*1.236311
50*1.236311*0.8088579
50*1.236311*1.236311
50*1.236311*1.236311 - 52
24.42324*0.8257661
24.42324*0.8257661*exp(-0.05*0.5)
50*1.236311
50*1.236311*1.236311
50*1.236311*1.236311 - 52
0.5/2
v
warnings
warnings()
install.packages("xaringan")
options(htmltools.dir.version = FALSE)
print <- "da"
install.packages("gganimate")
install.packages(c("DT", "highcharter", "tidyquant", "timetk"))
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(dpi=300)
library("quantmod")
getSymbols("^GSPC",
from = "2018-01-01",
to = "2018-12-01",
periodicity = "daily")
sp500_tbl <- tq_get("^GSPC",
from = "2018-01-01",
to = "2018-12-01",
periodicity = "daily")
library("tidyquant")
sp500_tbl <- tq_get("^GSPC",
from = "2018-01-01",
to = "2018-12-01",
periodicity = "daily")
symbols <- c("FB", "AAPL", "NFLX", "GOOG")
stocks_daily_tbl <- tq_get(symbols,
get = "stock.prices",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "daily")
tbill_daily_tbl <- tq_get("DGS10",
get = "economic.data",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "daily")
stocks_daiĺy_to_monthly_tbl <- stocks_daily_tbl %>%
select(date, symbol, close) %>%
group_by(symbol) %>%
tq_transmute(mutate_fun = to.monthly,  #<<
indexAt = "lastof") %>% #<<
mutate(date = as.Date(as.yearmon(date))) %>%
select(date, symbol, close) %>%
spread(symbol, close)
DT::datatable(stocks_daiĺy_to_monthly_tbl,
fillContainer = FALSE,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 5,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 2)
stocks_monthly_tbl <- tq_get(symbols,
get = "stock.prices",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "monthly") %>%
select(date, symbol, close) %>%
spread(symbol, close)
DT::datatable(stocks_monthly_tbl,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 5,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 2)
stock_returns_monthly_tbl <- stocks_monthly_tbl %>%
gather(symbols, close, -date) %>%
group_by(symbols) %>%
tq_transmute(mutate_fun = periodReturn,        #<<
period = "monthly",               #<<
type = "log",                     #<<
col_rename = "returns_monthly",   #<<
) %>%                              #<<
slice(-1) %>%
mutate(date = as.Date(as.yearmon(date))) %>%
spread(symbols, returns_monthly)
sp500_tbl  %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120)) +
theme_tq()
end <- as_date("2018-07-31")
sp500_tbl  %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120)) +
theme_tq()
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(dpi=300)
library("tidyquant")
library("quantmod")
getSymbols("^GSPC",
from = "2018-01-01",
to = "2018-12-01",
periodicity = "daily")
sp500_tbl <- tq_get("^GSPC",
from = "2018-01-01",
to = "2018-12-01",
periodicity = "daily")
symbols <- c("FB", "AAPL", "NFLX", "GOOG")
stocks_daily_tbl <- tq_get(symbols,
get = "stock.prices",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "daily")
tbill_daily_tbl <- tq_get("DGS10",
get = "economic.data",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "daily")
stocks_daiĺy_to_monthly_tbl <- stocks_daily_tbl %>%
select(date, symbol, close) %>%
group_by(symbol) %>%
tq_transmute(mutate_fun = to.monthly,  #<<
indexAt = "lastof") %>% #<<
mutate(date = as.Date(as.yearmon(date))) %>%
select(date, symbol, close) %>%
spread(symbol, close)
DT::datatable(stocks_daiĺy_to_monthly_tbl,
fillContainer = FALSE,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 5,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 2)
stocks_monthly_tbl <- tq_get(symbols,
get = "stock.prices",
from = "2013-01-01",
to = "2019-01-01",
periodicity = "monthly") %>%
select(date, symbol, close) %>%
spread(symbol, close)
DT::datatable(stocks_monthly_tbl,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 5,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 2)
stock_returns_monthly_tbl <- stocks_monthly_tbl %>%
gather(symbols, close, -date) %>%
group_by(symbols) %>%
tq_transmute(mutate_fun = periodReturn,        #<<
period = "monthly",               #<<
type = "log",                     #<<
col_rename = "returns_monthly",   #<<
) %>%                              #<<
slice(-1) %>%
mutate(date = as.Date(as.yearmon(date))) %>%
spread(symbols, returns_monthly)
stock_returns_acum_monthly_tbl <- stock_returns_monthly_tbl %>%
gather(symbol, returns, -date) %>%
group_by(symbol) %>%
mutate(returns_acum = cumsum(returns)) %>%    #<<
select(-returns) %>%
spread(symbol, returns_acum)
DT::datatable(stock_returns_acum_monthly_tbl,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 2,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 4)
stock_returns_monthly_tbl  %>%
gather(symbol, returns, -date) %>%
ggplot(mapping = aes(x = returns, fill = symbol)) +
geom_density(alpha = 0.5) +
labs(title = "Retornos", subtitle = "Facebook (FB), Amazon (AMZN), Netflix (NFLX) y Google (GOOG)",
x = "Retornos diarios", y = "Densidad") +
theme_tq() +
scale_fill_tq() +
facet_wrap(~ symbol, ncol = 2) +
guides(fill=guide_legend(title="Activos:"))
stock_returns_acum_monthly_tbl %>%
gather(symbol, returns_acum, -date) %>%
ggplot(mapping = aes(x = date, y = returns_acum, color = symbol)) +
geom_line() +
labs(title = "Retornos Acumulado", subtitle = "Facebook (FB), Amazon (AMZN), Netflix (NFLX) y Google (GOOG)",
x = "Periodo", y = "Retorno Acumulado") +
theme_tq() +
scale_fill_tq() +
facet_wrap(~ symbol, ncol = 2) +
guides(color = guide_legend(title="Activos:")) +
scale_y_continuous(labels = scales::percent)
View(sp500_tbl)
sp500_tbl  %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "")
sp500_tbl  %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(6), end),
ylim = c(100, 120))
end <- as_date("2018-07-31")
sp500_tbl  %>%
ggplot(aes(x = date, y = close)) +
geom_candlestick(aes(open = open, high = high, low = low, close = close)) +
labs(title = "AAPL Candlestick Chart",
subtitle = "Zoomed in using coord_x_date",
y = "Closing Price", x = "") +
coord_x_date(xlim = c(end - weeks(12), end),
ylim = c(2500, 3000)) +
theme_tq()
DT::datatable(stocks_monthly_tbl,
colnames = c('Fecha', symbols),
options = list(
columnDefs = list(list(className = 'dt-center', targets = c(1,2,3,4,5))),
pageLength = 4,
lengthMenu = c(1,2,3,4,5),
columnDefs = list(list(width = '20%', targets = list(1,2,3,4,5))))) %>% DT::formatRound(symbols, 2)
